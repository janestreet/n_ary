(*_ This file is automatically generated.  Do not edit it directly. *)

(** Defines list operations that produce or consume 3 lists at once. *)

open! Base

(** {2 Partitioning Lists}

    These functions produce many lists from one by assigning each result from the input to
    one of 3 buckets. *)

(** Transforms an input list into a tuple of lists. The Nth list is the elements of the
    input for which [f] returns [CaseN], in the order they occur in the input. *)
val partition_enum : 'a list -> f:('a -> Enum3.t) -> 'a list * 'a list * 'a list

(** Like [partition_enum]. [f] is also passed the index of the current list item. *)
val partition_enumi : 'a list -> f:(int -> 'a -> Enum3.t) -> 'a list * 'a list * 'a list

(** Transforms an input list into a tuple of lists. [f] is applied to every element of the
    input. For every result of the form [CaseN x], the Nth output list contains [x] in the
    same order that the inputs occurred. *)
val partition_map
  :  'a list
  -> f:('a -> ('b0, 'b1, 'b2) Variant3.t)
  -> 'b0 list * 'b1 list * 'b2 list

(** Like [partition_map]. [f] is also passed the index of the current list item. *)
val partition_mapi
  :  'a list
  -> f:(int -> 'a -> ('b0, 'b1, 'b2) Variant3.t)
  -> 'b0 list * 'b1 list * 'b2 list

(** {2 Unzipping Lists}

    These functions produces many lists from one by taking each part from a tuple into a
    separate list. *)

(** Transform a list of 3-tuples into a tuple of lists. *)
val unzip : ('a0 * 'a1 * 'a2) list -> 'a0 list * 'a1 list * 'a2 list

(** {2 Zipping Lists}

    These functions produce one list from many by processing multiple corresponding
    elements at once to produce a single result. *)

(** {3 Returning Unequal Lengths}

    These functions detect unequal lengths before they begin processing list elements, and
    return either [Ok _] or [Unequal_lengths]. *)

(** Transform 3 lists of equal length into a single list of 3-tuples. Returns
    [Unequal_lengths] if the input lists don't all have the same length. *)
val zip
  :  'a0 list
  -> 'a1 list
  -> 'a2 list
  -> ('a0 * 'a1 * 'a2) list List.Or_unequal_lengths.t

(** Map a function over 3 lists simultaneously. If the input lists don't all have the same
    length, returns [Unequal_lengths] without calling [f] on any elements. *)
val map
  :  'a0 list
  -> 'a1 list
  -> 'a2 list
  -> f:('a0 -> 'a1 -> 'a2 -> 'b)
  -> 'b list List.Or_unequal_lengths.t

(** Like [map]. [f] is also passed the index of the current list item. *)
val mapi
  :  'a0 list
  -> 'a1 list
  -> 'a2 list
  -> f:(int -> 'a0 -> 'a1 -> 'a2 -> 'b)
  -> 'b list List.Or_unequal_lengths.t

(** Like [map]. Ignores the result; used for side-effecting functions. *)
val iter
  :  'a0 list
  -> 'a1 list
  -> 'a2 list
  -> f:('a0 -> 'a1 -> 'a2 -> unit)
  -> unit List.Or_unequal_lengths.t

(** Like [iter]. [f] is also passed the index of the current list item. *)
val iteri
  :  'a0 list
  -> 'a1 list
  -> 'a2 list
  -> f:(int -> 'a0 -> 'a1 -> 'a2 -> unit)
  -> unit List.Or_unequal_lengths.t

(** Returns [Ok ()] if the input lists all have the same length. Returns [Unequal_lengths]
    otherwise. *)
val check_equal_lengths : _ list -> _ list -> _ list -> unit List.Or_unequal_lengths.t

(** {3 Raising on Unequal Lengths}

    These functions begin processing list elements immediately. If one or more lists end
    before the others, they raise an exception. *)

(** Like [zip], but raises if the input lists don't all have the same length. *)
val zip_exn : 'a0 list -> 'a1 list -> 'a2 list -> ('a0 * 'a1 * 'a2) list

(** Like [map]. Raises if the input lists don't all have the same length. May call [f]
    before raising. *)
val map_exn : 'a0 list -> 'a1 list -> 'a2 list -> f:('a0 -> 'a1 -> 'a2 -> 'b) -> 'b list

(** Like [map_exn]. [f] is also passed the index of the current list item. *)
val mapi_exn
  :  'a0 list
  -> 'a1 list
  -> 'a2 list
  -> f:(int -> 'a0 -> 'a1 -> 'a2 -> 'b)
  -> 'b list

(** Like [iter]. Raises if the input lists don't all have the same length. May call [f]
    before raising. *)
val iter_exn : 'a0 list -> 'a1 list -> 'a2 list -> f:('a0 -> 'a1 -> 'a2 -> unit) -> unit

(** Like [iter_exn]. [f] is also passed the index of the current list item. *)
val iteri_exn
  :  'a0 list
  -> 'a1 list
  -> 'a2 list
  -> f:(int -> 'a0 -> 'a1 -> 'a2 -> unit)
  -> unit
