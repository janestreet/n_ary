(* This file is automatically generated.  Do not edit it directly. *)

open! Base

type t =
  | Case0
  | Case1
  | Case2
[@@deriving compare, enumerate, equal, hash, sexp_of]

(* constants *)

let case0 = Case0
let case1 = Case1
let case2 = Case2

(* predicates *)

let is_case0 = function
  | Case0 -> true
  | _ -> false
;;

let is_case1 = function
  | Case1 -> true
  | _ -> false
;;

let is_case2 = function
  | Case2 -> true
  | _ -> false
;;

(* int conversion *)

let to_int = function
  | Case0 -> 0
  | Case1 -> 1
  | Case2 -> 2
;;

let of_int = function
  | 0 -> Some Case0
  | 1 -> Some Case1
  | 2 -> Some Case2
  | _ -> None
;;

let of_int_exn = function
  | 0 -> Case0
  | 1 -> Case1
  | 2 -> Case2
  | n -> raise_s [%message "N_ary.Enum3.of_int_exn: invalid input" ~_:(n : int)]
;;
