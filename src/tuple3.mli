(*_ This file is automatically generated.  Do not edit it directly. *)

(** Defines a tuple type containing 3 values. We refer to each value as a "part". Parts
    are numbered consecutively beginning at zero. *)

open! Base

type ('a0, 'a1, 'a2) t = 'a0 * 'a1 * 'a2 [@@deriving compare, equal, hash, sexp_of]

(** Constructor *)
val create : 'a0 -> 'a1 -> 'a2 -> ('a0, 'a1, 'a2) t

(** Accessors *)

val part0 : ('a, _, _) t -> 'a
val part1 : (_, 'a, _) t -> 'a
val part2 : (_, _, 'a) t -> 'a

(** Functional update *)

val set_part0 : (_, 'a1, 'a2) t -> 'a0 -> ('a0, 'a1, 'a2) t
val set_part1 : ('a0, _, 'a2) t -> 'a1 -> ('a0, 'a1, 'a2) t
val set_part2 : ('a0, 'a1, _) t -> 'a2 -> ('a0, 'a1, 'a2) t

(** Map all parts *)
val map
  :  ('a0, 'a1, 'a2) t
  -> f0:('a0 -> 'b0)
  -> f1:('a1 -> 'b1)
  -> f2:('a2 -> 'b2)
  -> ('b0, 'b1, 'b2) t

(** Map individual parts *)

val map_part0 : ('b, 'a1, 'a2) t -> f:('b -> 'c) -> ('c, 'a1, 'a2) t
val map_part1 : ('a0, 'b, 'a2) t -> f:('b -> 'c) -> ('a0, 'c, 'a2) t
val map_part2 : ('a0, 'a1, 'b) t -> f:('b -> 'c) -> ('a0, 'a1, 'c) t
