(* This file is automatically generated.  Do not edit it directly. *)

open! Base

type ('a0, 'a1, 'a2) t = 'a0 * 'a1 * 'a2 [@@deriving compare, equal, hash, sexp_of]

(* constructor *)

let create x0 x1 x2 = x0, x1, x2

(* accessors *)

let part0 (x, _, _) = x
let part1 (_, x, _) = x
let part2 (_, _, x) = x

(* functional update *)

let set_part0 (_, x1, x2) y = y, x1, x2
let set_part1 (x0, _, x2) y = x0, y, x2
let set_part2 (x0, x1, _) y = x0, x1, y

(* map all parts *)

let map (x0, x1, x2) ~f0 ~f1 ~f2 = f0 x0, f1 x1, f2 x2

(* map each part *)

let map_part0 (x0, x1, x2) ~f = f x0, x1, x2
let map_part1 (x0, x1, x2) ~f = x0, f x1, x2
let map_part2 (x0, x1, x2) ~f = x0, x1, f x2
