(* This file is automatically generated.  Do not edit it directly. *)

open! Base

let partition_mapi list ~f =
  List.foldi list ~init:([], [], []) ~f:(fun i acc x ->
    match (f i x : _ Variant3.t) with
    | Case0 y -> Tuple3.set_part0 acc (y :: Tuple3.part0 acc)
    | Case1 y -> Tuple3.set_part1 acc (y :: Tuple3.part1 acc)
    | Case2 y -> Tuple3.set_part2 acc (y :: Tuple3.part2 acc))
  |> Tuple3.map ~f0:List.rev ~f1:List.rev ~f2:List.rev
;;

let partition_map list ~f = partition_mapi list ~f:(fun _ x -> f x)

let partition_enumi list ~f =
  partition_mapi list ~f:(fun i x ->
    match (f i x : Enum3.t) with
    | Case0 -> Case0 x
    | Case1 -> Case1 x
    | Case2 -> Case2 x)
;;

let partition_enum list ~f = partition_enumi list ~f:(fun _ x -> f x)

let unzip list =
  List.fold_right list ~init:([], [], []) ~f:(fun (x0, x1, x2) (l0, l1, l2) ->
    x0 :: l0, x1 :: l1, x2 :: l2)
;;

let zip_exn =
  let rec zip_loop l0 l1 l2 acc =
    match l0, l1, l2 with
    | [], [], [] -> List.rev acc
    | x0 :: l0, x1 :: l1, x2 :: l2 -> zip_loop l0 l1 l2 ((x0, x1, x2) :: acc)
    | _ -> raise_s [%message "N_ary.List3.zip_exn: lists have unequal lengths"]
  in
  fun l0 l1 l2 -> zip_loop l0 l1 l2 []
;;

let map_exn =
  let rec map_loop l0 l1 l2 ~f acc =
    match l0, l1, l2 with
    | [], [], [] -> List.rev acc
    | x0 :: l0, x1 :: l1, x2 :: l2 -> map_loop l0 l1 l2 ~f (f x0 x1 x2 :: acc)
    | _ -> raise_s [%message "N_ary.List3.map_exn: lists have unequal lengths"]
  in
  fun l0 l1 l2 ~f -> map_loop l0 l1 l2 ~f []
;;

let mapi_exn =
  let rec mapi_loop l0 l1 l2 ~f i acc =
    match l0, l1, l2 with
    | [], [], [] -> List.rev acc
    | x0 :: l0, x1 :: l1, x2 :: l2 -> mapi_loop l0 l1 l2 ~f (i + 1) (f i x0 x1 x2 :: acc)
    | _ -> raise_s [%message "N_ary.List3.mapi_exn: lists have unequal lengths"]
  in
  fun l0 l1 l2 ~f -> mapi_loop l0 l1 l2 ~f 0 []
;;

let iter_exn =
  let rec iter_loop l0 l1 l2 ~f =
    match l0, l1, l2 with
    | [], [], [] -> ()
    | x0 :: l0, x1 :: l1, x2 :: l2 ->
      f x0 x1 x2;
      iter_loop l0 l1 l2 ~f
    | _ -> raise_s [%message "N_ary.List3.iter_exn: lists have unequal lengths"]
  in
  fun l0 l1 l2 ~f -> iter_loop l0 l1 l2 ~f
;;

let iteri_exn =
  let rec iteri_loop l0 l1 l2 ~f i =
    match l0, l1, l2 with
    | [], [], [] -> ()
    | x0 :: l0, x1 :: l1, x2 :: l2 ->
      f i x0 x1 x2;
      iteri_loop l0 l1 l2 ~f (i + 1)
    | _ -> raise_s [%message "N_ary.List3.iteri_exn: lists have unequal lengths"]
  in
  fun l0 l1 l2 ~f -> iteri_loop l0 l1 l2 ~f 0
;;

let rec check_equal_lengths l0 l1 l2 =
  match l0, l1, l2 with
  | [], [], [] -> List.Or_unequal_lengths.Ok ()
  | _ :: l0, _ :: l1, _ :: l2 -> check_equal_lengths l0 l1 l2
  | _ -> List.Or_unequal_lengths.Unequal_lengths
;;

let zip l0 l1 l2 =
  match check_equal_lengths l0 l1 l2 with
  | Unequal_lengths as x -> x
  | Ok () -> Ok (zip_exn l0 l1 l2)
;;

let map l0 l1 l2 ~f =
  match check_equal_lengths l0 l1 l2 with
  | Unequal_lengths as x -> x
  | Ok () -> Ok (map_exn l0 l1 l2 ~f)
;;

let mapi l0 l1 l2 ~f =
  match check_equal_lengths l0 l1 l2 with
  | Unequal_lengths as x -> x
  | Ok () -> Ok (mapi_exn l0 l1 l2 ~f)
;;

let iter l0 l1 l2 ~f =
  match check_equal_lengths l0 l1 l2 with
  | Unequal_lengths as x -> x
  | Ok () -> Ok (iter_exn l0 l1 l2 ~f)
;;

let iteri l0 l1 l2 ~f =
  match check_equal_lengths l0 l1 l2 with
  | Unequal_lengths as x -> x
  | Ok () -> Ok (iteri_exn l0 l1 l2 ~f)
;;
